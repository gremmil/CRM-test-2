  //METODOS FILTRADO
  cambioFiltro(pedidosListado: PedidoListado[]) {
    //SUBSCRIBE DE LOS FILTROS
    const nroDocumento = this.formFiltros.value.NroDocumento
    const idEstadoPedido = this.formFiltros.value.IdEstadoPedido
    const idCallCenter = this.formFiltros.value.IdCallCenter
    const idCampana = this.formFiltros.value.IdCampana

    let filtro!: PedidoListado[]

    // CERO COINCIDENCIAS
    if(nroDocumento == '' && idEstadoPedido ==0 && idCallCenter == 0 && idCampana == 0){
      filtro = pedidosListado
    }
    //UNA COINCIDENCIAS
    if(idEstadoPedido !=0 && idCallCenter == 0 && idCampana == 0 && nroDocumento == ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdEstadoPedido == idEstadoPedido
      )
    }
    if(idEstadoPedido ==0 && idCallCenter != 0 && idCampana == 0 && nroDocumento == ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdCallCenter == idCallCenter
      )
    }
    if(idEstadoPedido ==0 && idCallCenter == 0 && idCampana != 0 && nroDocumento == ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdCampana == idCampana
      )
    }
    if(idEstadoPedido ==0 && idCallCenter == 0 && idCampana == 0 && nroDocumento != ''){
      filtro = pedidosListado.filter((element: any)=>
         element.NroDocumento == nroDocumento
      )
    }

    //DOS COINCIDENCIAS
    if(idEstadoPedido !=0 && idCallCenter != 0 && idCampana == 0 && nroDocumento == ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdEstadoPedido == idEstadoPedido && element.IdCallCenter == idCallCenter
      )
    }
    if(idEstadoPedido ==0 && idCallCenter != 0 && idCampana != 0 && nroDocumento == ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdCallCenter == idCallCenter && element.IdCampana == idCampana
      )
    }
    if(idEstadoPedido ==0 && idCallCenter == 0 && idCampana != 0 && nroDocumento != ''){
      filtro = pedidosListado.filter((element: any)=>
         element.NroDocumento == nroDocumento && element.IdCampana == idCampana
      )
    }
    if(idEstadoPedido !=0 && idCallCenter == 0 && idCampana == 0 && nroDocumento != ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdEstadoPedido == idEstadoPedido && element.NroDocumento == nroDocumento
      )
    }
    if(idEstadoPedido ==0 && idCallCenter != 0 && idCampana == 0 && nroDocumento != ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdCallCenter == idCallCenter && element.NroDocumento == nroDocumento
      )
    }
    if(idEstadoPedido !=0 && idCallCenter == 0 && idCampana != 0 && nroDocumento == ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdEstadoPedido == idEstadoPedido && element.IdCampana == idCampana
      )
    }

    //TRES COINCIDENCIAS
    if(idEstadoPedido !=0 && idCallCenter != 0 && idCampana != 0 && nroDocumento == ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdEstadoPedido == idEstadoPedido && element.IdCallCenter == idCallCenter && element.IdCampana == idCampana
      )
    }
    if(idEstadoPedido ==0 && idCallCenter != 0 && idCampana != 0 && nroDocumento != ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdCallCenter == idCallCenter && element.IdCampana == idCampana && element.NroDocumento == nroDocumento
      )
    }
    if(idEstadoPedido !=0 && idCallCenter == 0 && idCampana != 0 && nroDocumento != ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdEstadoPedido == idEstadoPedido && element.IdCampana == idCampana && element.NroDocumento == nroDocumento
      )
    }
    if(idEstadoPedido !=0 && idCallCenter != 0 && idCampana == 0 && nroDocumento != ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdEstadoPedido == idEstadoPedido && element.IdCallCenter == idCallCenter && element.NroDocumento == nroDocumento
      )
    }
    //CUATRO COINCIDENCIAS
    if(idEstadoPedido !=0 && idCallCenter != 0 && idCampana != 0 && nroDocumento != ''){
      filtro = pedidosListado.filter((element: any)=>
         element.IdEstadoPedido == idEstadoPedido && element.IdCallCenter == idCallCenter && element.IdCampana == idCampana && element.NroDocumento == nroDocumento
      )
    }

    return filtro
  }
}


//


cambioRadioBtn(i: number, clv: string, idTipoProducto: number) {
    let control: any
    let valFlag: any
    let indexFlagPortabilidad: any
    switch (idTipoProducto) {
      case 1:
        control = this.frmReqProdFibra.controls[i];//detectamos el control del elemento del formArray*/
        valFlag = this.frmReqProdFibra.value[i][clv];//detectamos el valor del flag en el elemento del formArray
        indexFlagPortabilidad = this.camposForm.findIndex((campo) => {//buscamos el indice de flag en el array de los campos del Formulario
          return campo.clave == clv
        })
        break;
      case 2:
        control = this.frmReqProdLineasMoviles.controls[i];//detectamos el control del elemento del formArray*/
        valFlag = this.frmReqProdLineasMoviles.value[i][clv];//detectamos el valor del flag en el elemento del formArray
        indexFlagPortabilidad = this.camposForm.findIndex((campo) => {//buscamos el indice de flag en el array de los campos del Formulario
          return campo.clave == clv
        })
        break;
      case 3:
        control = this.frmReqProdLineasMoviles.controls[i];//detectamos el control del elemento del formArray*/
        valFlag = this.frmReqProdLineasMoviles.value[i][clv];//detectamos el valor del flag en el elemento del formArray
        indexFlagPortabilidad = this.camposForm.findIndex((campo) => {//buscamos el indice de flag en el array de los campos del Formulario
          return campo.clave == clv
        })
        break;
      case 4:
        control = this.frmReqProdTvMovil.controls[i];//detectamos el control del elemento del formArray*/
        valFlag = this.frmReqProdTvMovil.value[i][clv];//detectamos el valor del flag en el elemento del formArray
        indexFlagPortabilidad = this.camposForm.findIndex((campo) => {//buscamos el indice de flag en el array de los campos del Formulario
          return campo.clave == clv
        })
        break;
    }
    //Cambio en el flag de portabilidad
    switch (clv) {
      case 'flagPortabilidad':
        if (valFlag == '0') {
          this.inhabilitarCampos(indexFlagPortabilidad, control)
        } else {
          this.habilitarCampos(indexFlagPortabilidad, control, clv)
        }
        break;
      case 'flagMismoTitular':
        if (valFlag == '1') {
          this.inhabilitarCampos(indexFlagPortabilidad, control)
        } else {
          this.habilitarCampos(indexFlagPortabilidad, control, clv)
        }
        break;
    }
  }
  cambioSelect(i: number, clv: string) {

    if(this.frmReqProdLineasMoviles.value[i] != undefined){
      const valSelect = this.frmReqProdLineasMoviles.value[i][clv];//detectamos el valor del flag en el elemento del formArray
      const control = this.frmReqProdLineasMoviles.controls[i];
  
      switch (clv) {
        case 'idTipoPlan':
          let ctrl: any = control.get('numeroICC')
          if (valSelect == 2) {
            ctrl.enable()
          } else {
            ctrl.disable()
          }
          break;
      }
  
    }

  }
  inhabilitarCampos(iFlag: number, control: AbstractControl) {
    this.camposForm.forEach((campo, index, arr) => {//iteramos sobre los elementos del
      if (index > iFlag) {
        let ctrl: any = control.get([campo.clave]);
        ctrl.disable()
      }
    })
  }
  habilitarCampos(iFlag: number, control: AbstractControl, clv: string) {
    this.camposForm.forEach((campo, index, arr) => {//iteramos sobre los elementos del
      switch (clv) {
        case 'flagPortabilidad':
          //fibra optica
          if (control.get('idTipoProducto')?.value == 1) {
            if (index > iFlag && index <= iFlag + 5) {
              if (campo.clave != 'idTipoPlan' && campo.clave != 'numeroICC') {
                let ctrl: any = control.get([campo.clave]);
                ctrl.enable()
              }
            }
          } else {//lineas moviles
            if (index > iFlag && index <= iFlag + 5) {
              if (campo.clave != 'numeroICC') {
                let ctrl: any = control.get([campo.clave]);
                ctrl.enable()
              } else {
                if (control.get('idTipoPlan')?.value == 2) {
                  let ctrl: any = control.get([campo.clave]);
                  ctrl.enable()
                }
              }
            }
          }
          break;
        case 'flagMismoTitular':
          //fibra optica
          if (control.get('idTipoProducto')?.value == 1) {
            if (index > iFlag && index <= iFlag + 4) {
              let ctrl: any = control.get([campo.clave]);
              ctrl.enable()
            }
          } else {//lineas moviles
            if (index > iFlag && index <= iFlag + 4) {
              let ctrl: any = control.get([campo.clave]);
              ctrl.enable()
            }
          }
          break;
      }


    })

  }
  getIndexProducto(i: number) {
    const control = this.frmReqProdLineasMoviles.controls[i];
    const productosMoviles = this.frmReqProdLineasMoviles.value.filter((prod: any) => {
      return prod.idTipoProducto == 2 || prod.idTipoProducto == 3
    })
    const index = productosMoviles.findIndex((producto: any) => {
      return producto.idPedidoProducto == control.value.idPedidoProducto
    })
    return index + 1
  }
  getPlanes(i: number, idTipoProducto: number) {
    let control!: any
    let productosMoviles!: any
    let index!: any
    let filtro: PlanesInterface[]=[]
    switch (idTipoProducto) {
      case 1:
        control = this.frmReqProdFibra.controls[i];
        break;
      case 2:
        control = this.frmReqProdLineasMoviles.controls[i];
        break;
      case 3:
        control = this.frmReqProdLineasMoviles.controls[i];
        break;
      case 4:
        control = this.frmReqProdTvMovil.controls[i];
        break;
    }

    if(this.planes!=undefined){

        /*index = this.svcPedido.pedidoProducto.value.findIndex((producto: any) => {
          return producto.idPedidoProducto == control.value.idPedidoProducto
        })*/

      //const idTipoProductoActual = control.get('idTipoProducto')?.value 
      const idTipoProductoActual = idTipoProducto
  
      if (idTipoProductoActual == 1) {
        this.planesFiltroProducto = this.planes.filter(plan => {
          return plan.IdTipoProducto == idTipoProductoActual && plan.IdCampana == this.svcPedido.pedidoCabecera.value.idCampana
        })
        filtro = this.planesFiltroProducto
      } else if (idTipoProductoActual == 2 || idTipoProductoActual == 3) {
        if (i == 0) {
          this.planesFiltroProducto = this.planes.filter(plan => {
            return plan.IdTipoProducto == 2 && plan.IdCampana == this.svcPedido.pedidoCabecera.value.idCampana
          })
          filtro = this.planesFiltroProducto
        } else {
          this.planesFiltroProducto = this.planes.filter(plan => {
            return plan.IdTipoProducto == 3 && plan.IdCampana == this.svcPedido.pedidoCabecera.value.idCampana
          })
          filtro = this.planesFiltroProducto
        }
      } else {
        this.planesFiltroProducto = this.planes.filter(plan => {
          return plan.IdTipoProducto == idTipoProductoActual && plan.IdCampana == this.svcPedido.pedidoCabecera.value.idCampana
        })
        filtro = this.planesFiltroProducto
      }
    }
    
    return filtro;
  }